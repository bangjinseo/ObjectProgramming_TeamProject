#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <string>
#include <locale>
#include <map>

std::wstring formatMoney(int money) {
    std::wstring result;
    std::wstring num = std::to_wstring(money);
    int count = 0;
    for (int i = num.size() - 1; i >= 0; --i) {
        result.insert(result.begin(), num[i]);
        count++;
        if (count % 3 == 0 && i != 0) {
            result.insert(result.begin(), L',');
        }
    }
    result += L" Í≥®Îìú";
    return result;
}

class MoneyDisplay {
private:
    int money = 50000000;
    sf::Text text;
    sf::Font font;

public:
    bool init() {
        if (!font.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "Ìè∞Ìä∏ Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }
        text.setFont(font);
        text.setCharacterSize(20);
        text.setFillColor(sf::Color::Yellow);
        text.setPosition(55.f, 26.f);
        text.setString(sf::String(formatMoney(money)));
        return true;
    }

    void increase(int amount = 1) {
        money += amount;
        text.setString(sf::String(formatMoney(money)));
    }

    void addMoney(int amount) {
        money += amount;
        text.setString(sf::String(formatMoney(money)));
    }

    bool spendMoney(int amount) {
        if (money >= amount) {
            money -= amount;
            text.setString(sf::String(formatMoney(money)));
            return true;
        }
        return false;
    }

    int getMoney() const {
        return money;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(text);
    }
};

class Background {
private:
    sf::Texture texture;
    sf::Sprite sprite;
    std::string currentFile = "bg_playground.png";

public:
    bool init(const sf::RenderWindow& window) {
        return load("bg_playground.png", window);
    }

    bool load(const std::string& filename, const sf::RenderWindow& window) {
        if (!texture.loadFromFile(filename)) {
            std::cerr << filename << " Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }

        sprite.setTexture(texture);
        float scaleX = window.getSize().x / static_cast<float>(texture.getSize().x);
        float scaleY = window.getSize().y / static_cast<float>(texture.getSize().y);
        sprite.setScale(scaleX, scaleY);
        currentFile = filename;
        return true;
    }

    const std::string& getCurrentFile() const {
        return currentFile;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }
};

class Character {
private:
    std::vector<sf::Texture> textures;
    sf::Sprite sprite;
    int currentFrame = 0;
    sf::Clock clock;
    float switchTime = 0.5f;

public:
    bool init() {
        textures.resize(2);
        if (!textures[0].loadFromFile("kn_beggar1.png")) {
            std::cerr << "kn_beggar1.png Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }
        if (!textures[1].loadFromFile("kn_beggar2.png")) {
            std::cerr << "kn_beggar2.png Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }

        sprite.setTexture(textures[0]);
        sprite.setScale(0.6f, 0.6f);
        sprite.setPosition(20.f, 300.f);
        return true;
    }

    void update() {
        if (clock.getElapsedTime().asSeconds() >= switchTime) {
            currentFrame = (currentFrame + 1) % 2;
            sprite.setTexture(textures[currentFrame]);
            clock.restart();
        }
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }
};

class RealEstate {
public:
    struct Property {
        std::string name;
        int price;
        int maxInterest;
        bool owned;
        sf::FloatRect buttonArea;
        sf::Text buttonText;
    };

private:
    sf::Font font;
    std::map<std::string, Property> properties;
    sf::Texture buildingTexture;
    sf::Sprite buildingSprite;
    int totalSalesProfit = 0; // Ïó≠ÎåÄ Î∂ÄÎèôÏÇ∞ ÌåêÎß§ ÏàòÏùµ ÎàÑÏ†Å

public:
    // getTotalSalesProfit Ìï®Ïàò Ï∂îÍ∞Ä
    int getTotalSalesProfit() const {
        return totalSalesProfit;
    }

    bool init(sf::RenderWindow& window) {
        if (!font.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "Ìè∞Ìä∏ Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }

        if (!buildingTexture.loadFromFile("building_bg.png")) {
            std::cerr << "building_bg.png Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }

        buildingSprite.setTexture(buildingTexture);
        float scaleX = window.getSize().x / static_cast<float>(buildingTexture.getSize().x);
        float scaleY = window.getSize().y / static_cast<float>(buildingTexture.getSize().y);
        buildingSprite.setScale(scaleX, scaleY);

        // Î∂ÄÎèôÏÇ∞ Ï†ïÎ≥¥ Ï¥àÍ∏∞Ìôî
        Property eng8;
        eng8.name = "8Í≥µÌïôÍ¥Ä";
        eng8.price = 3000;
        eng8.maxInterest = 2000;
        eng8.owned = false;
        eng8.buttonArea = sf::FloatRect(38, 352, 135, 41);
        eng8.buttonText.setFont(font);
        eng8.buttonText.setString(formatMoney(eng8.price));
        eng8.buttonText.setCharacterSize(14);
        eng8.buttonText.setFillColor(sf::Color::Black);
        eng8.buttonText.setPosition(70, 360);
        properties["8Í≥µÌïôÍ¥Ä"] = eng8;

        Property student;
        student.name = "ÌïôÏÉùÌöåÍ¥Ä";
        student.price = 500;
        student.maxInterest = 100;
        student.owned = false;
        student.buttonArea = sf::FloatRect(234, 352, 135, 41);
        student.buttonText.setFont(font);
        student.buttonText.setString(formatMoney(student.price));
        student.buttonText.setCharacterSize(14);
        student.buttonText.setFillColor(sf::Color::Black);
        student.buttonText.setPosition(270, 360);
        properties["ÌïôÏÉùÌöåÍ¥Ä"] = student;

        Property challenge;
        challenge.name = "Ï±åÎ¶∞ÏßÄÌïòÏö∞Ïä§";
        challenge.price = 5000;
        challenge.maxInterest = 4500;
        challenge.owned = false;
        challenge.buttonArea = sf::FloatRect(38, 588, 135, 41);
        challenge.buttonText.setFont(font);
        challenge.buttonText.setString(formatMoney(challenge.price));
        challenge.buttonText.setCharacterSize(14);
        challenge.buttonText.setFillColor(sf::Color::Black);
        challenge.buttonText.setPosition(70, 605);
        properties["Ï±åÎ¶∞ÏßÄÌïòÏö∞Ïä§"] = challenge;

        Property library;
        library.name = "ÎèÑÏÑúÍ¥Ä";
        library.price = 2500;
        library.maxInterest = 1800;
        library.owned = false;
        library.buttonArea = sf::FloatRect(234, 588, 135, 41);
        library.buttonText.setFont(font);
        library.buttonText.setString(formatMoney(library.price));
        library.buttonText.setCharacterSize(14);
        library.buttonText.setFillColor(sf::Color::Black);
        library.buttonText.setPosition(270, 605);
        properties["ÎèÑÏÑúÍ¥Ä"] = library;

        return true;
    }

    int getTotalPropertyValue() const {
        int totalValue = 0;
        for (const auto& pair : properties) {
            if (pair.second.owned) {
                totalValue += pair.second.price;
            }
        }
        return totalValue;
    }

    int getTotalInterest() const {
        int totalInterest = 0;
        for (const auto& pair : properties) {
            if (pair.second.owned) {
                totalInterest += pair.second.maxInterest;
            }
        }
        return totalInterest;
    }

    int getOwnedPropertyCount() const {
        int count = 0;
        for (const auto& pair : properties) {
            if (pair.second.owned) {
                count++;
            }
        }
        return count;
    }

    bool handleClick(sf::Vector2f mousePos, MoneyDisplay& moneyDisplay) {
        for (auto& pair : properties) {
            Property& prop = pair.second;
            if (prop.buttonArea.contains(mousePos)) {
                if (!prop.owned) {
                    if (moneyDisplay.spendMoney(prop.price)) {
                        prop.owned = true;
                        prop.buttonText.setString(L"ÌåêÎß§ÌïòÍ∏∞");
                        prop.buttonText.setFillColor(sf::Color(255, 0, 0));
                        std::cout << prop.name << " Íµ¨Îß§ ÏôÑÎ£å! " << prop.price << "Í≥®Îìú ÏßÄÎ∂à" << std::endl;
                        return true;
                    }
                    else {
                        std::cout << "Í≥®ÎìúÍ∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!" << std::endl;
                    }
                }
                else {
                    int sellPrice = prop.price + prop.maxInterest;
                    int profit = prop.maxInterest; // Ïã§Ï†ú ÏàòÏùµÏùÄ Ïù¥Ïûê Î∂ÄÎ∂Ñ
                    totalSalesProfit += profit; // ÏàòÏùµ ÎàÑÏ†Å

                    moneyDisplay.addMoney(sellPrice);
                    prop.owned = false;
                    prop.buttonText.setString(formatMoney(prop.price));
                    prop.buttonText.setFillColor(sf::Color(0, 0, 0));

                    std::cout << prop.name << " ÌåêÎß§ ÏôÑÎ£å! " << sellPrice << "Í≥®Îìú ÌöçÎìù (ÏàòÏùµ: " << profit << "Í≥®Îìú)" << std::endl;
                    std::cout << "üí∞ Ïó≠ÎåÄ Î∂ÄÎèôÏÇ∞ ÌåêÎß§ Ï¥ù ÏàòÏùµ: " << totalSalesProfit << "Í≥®Îìú" << std::endl;
                    return true;
                }
            }
        }
        return false;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(buildingSprite);
        for (const auto& pair : properties) {
            window.draw(pair.second.buttonText);
        }
    }
};

class KNUPowerSystem {
private:
    sf::Font font;
    sf::Texture knuTexture;
    sf::Sprite knuSprite;
    sf::Sprite knuCharSprite;

    int level = 1;
    int goldPerClick = 1;
    int levelUpCost = 100;

    sf::RectangleShape levelUpButton;
    sf::Text levelUpText;
    sf::Text levelText;
    sf::Text goldLevelText;
    sf::Text propertyLevelText;

    // ÏπúÍµ¨Î≥Ñ Í∞úÎ≥Ñ Î≥¥ÎÑàÏä§ ÌëúÏãú ÌÖçÏä§Ìä∏Îì§
    sf::Text myeongjunBonusText;
    sf::Text ahyeonBonusText;
    sf::Text jinseoBonusText;

public:
    bool init(sf::RenderWindow& window) {
        if (!font.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "Ìè∞Ìä∏ Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }

        if (!knuTexture.loadFromFile("KUN power_bg.png")) {
            std::cerr << "KUN power_bg.png Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }

        knuSprite.setTexture(knuTexture);
        float scaleX = window.getSize().x / static_cast<float>(knuTexture.getSize().x);
        float scaleY = window.getSize().y / static_cast<float>(knuTexture.getSize().y);
        knuSprite.setScale(scaleX, scaleY);

        knuCharSprite.setScale(0.4f, 0.4f);
        knuCharSprite.setPosition(142.f, 498.f);

        levelUpButton.setSize(sf::Vector2f(140.f, 27.f));
        levelUpButton.setPosition(220.f, 235.f);
        levelUpButton.setFillColor(sf::Color(255, 195, 91));
        levelUpButton.setOutlineColor(sf::Color(255, 195, 91));
        levelUpButton.setOutlineThickness(2.f);

        levelUpText.setFont(font);
        levelUpText.setString(L"Î†àÎ≤®ÏóÖ (" + formatMoney(levelUpCost) + L")");
        levelUpText.setCharacterSize(15);
        levelUpText.setFillColor(sf::Color::Black);
        levelUpText.setPosition(235.f, 243.f);

        levelText.setFont(font);
        levelText.setString(L"Lv" + std::to_wstring(level));
        levelText.setCharacterSize(24);
        levelText.setFillColor(sf::Color(88, 74, 40));
        levelText.setPosition(195.f, 190.f);

        goldLevelText.setFont(font);
        goldLevelText.setString(L" 1"); // Ï¥àÍ∏∞Í∞íÏùÄ 1
        goldLevelText.setCharacterSize(18);
        goldLevelText.setFillColor(sf::Color(48, 42, 27));
        goldLevelText.setPosition(140.f, 305.f);

        propertyLevelText.setFont(font);
        propertyLevelText.setString(L"");
        propertyLevelText.setCharacterSize(18);
        propertyLevelText.setFillColor(sf::Color(48, 42, 27));
        propertyLevelText.setPosition(157.f, 355.f);

        // Î™ÖÏ§Ä Î≥¥ÎÑàÏä§ ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî (0.1%)
        myeongjunBonusText.setFont(font);
        myeongjunBonusText.setString(L"");
        myeongjunBonusText.setCharacterSize(12);
        myeongjunBonusText.setFillColor(sf::Color(120, 84, 35));
        myeongjunBonusText.setPosition(122.f, 511.f);

        // ÏïÑÌòÑ Î≥¥ÎÑàÏä§ ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî (0.3%)
        ahyeonBonusText.setFont(font);
        ahyeonBonusText.setString(L"");
        ahyeonBonusText.setCharacterSize(12);
        ahyeonBonusText.setFillColor(sf::Color(120, 84, 35));
        ahyeonBonusText.setPosition(290.f, 511.f);

        // ÏßÑÏÑú Î≥¥ÎÑàÏä§ ÌÖçÏä§Ìä∏ Ï¥àÍ∏∞Ìôî (0.5%)
        jinseoBonusText.setFont(font);
        jinseoBonusText.setString(L"");
        jinseoBonusText.setCharacterSize(12);
        jinseoBonusText.setFillColor(sf::Color(120, 84, 35));
        jinseoBonusText.setPosition(122.f, 591.f);

        return true;
    }

    bool tryLevelUp(MoneyDisplay& moneyDisplay) {
        if (moneyDisplay.spendMoney(levelUpCost)) {
            level++;
            goldPerClick = level;
            levelUpCost = 100 * level;

            levelText.setString(L"Lv" + std::to_wstring(level));
            levelUpText.setString(L"Î†àÎ≤®ÏóÖ (" + formatMoney(levelUpCost) + L")");
            // goldLevelText ÏóÖÎç∞Ïù¥Ìä∏ Ï†úÍ±∞ (Î≥ÑÎèÑ Ìï®ÏàòÏóêÏÑú Ï≤òÎ¶¨)

            return true;
        }
        return false;
    }

    // Í∞úÎ≥Ñ ÏπúÍµ¨ Î≥¥ÎÑàÏä§ Í≥ÑÏÇ∞ Ìï®Ïàò (Ï∞®Îì± Î≥¥ÎÑàÏä§Ïú® Ï†ÅÏö©)
    int calculateIndividualFriendBonus(int currentGold, int friendLevel, int friendIndex) {
        if (friendLevel >= 20) {
            double bonusRate = 0.0;
            switch (friendIndex) {
                case 0: bonusRate = 0.001; break; // Î™ÖÏ§Ä: 0.1%
                case 1: bonusRate = 0.003; break; // ÏïÑÌòÑ: 0.3%
                case 2: bonusRate = 0.005; break; // ÏßÑÏÑú: 0.5%
            }
            return static_cast<int>(currentGold * bonusRate);
        }
        return 0;
    }

    // Ï†ÑÏ≤¥ ÏπúÍµ¨ Î≥¥ÎÑàÏä§ Í≥ÑÏÇ∞ Ìï®Ïàò (ÏûêÏÇ∞ Í≥ÑÏÇ∞Ïö©)
    int calculateFriendBonus(int currentGold, int friend1Level, int friend2Level, int friend3Level) {
        int totalBonus = 0;

        // Î™ÖÏ§Ä Î≥¥ÎÑàÏä§ (0.1%)
        if (friend1Level >= 20) {
            totalBonus += static_cast<int>(currentGold * 0.001);
        }

        // ÏïÑÌòÑ Î≥¥ÎÑàÏä§ (0.3%)
        if (friend2Level >= 20) {
            totalBonus += static_cast<int>(currentGold * 0.003);
        }

        // ÏßÑÏÑú Î≥¥ÎÑàÏä§ (0.5%)
        if (friend3Level >= 20) {
            totalBonus += static_cast<int>(currentGold * 0.005);
        }

        return totalBonus;
    }

    // ÏπúÍµ¨Î≥Ñ Î≥¥ÎÑàÏä§ ÌÖçÏä§Ìä∏ ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
    void updateFriendBonusDisplay(int currentGold, int friend1Level, int friend2Level, int friend3Level) {
        // Î™ÖÏ§Ä Î≥¥ÎÑàÏä§ ÌëúÏãú (0.1%)
        if (friend1Level >= 20) {
            int myeongjunBonus = calculateIndividualFriendBonus(currentGold, friend1Level, 0);
            std::wstring myeongjunText = formatMoney(myeongjunBonus);
            myeongjunBonusText.setString(myeongjunText);
        } else {
            myeongjunBonusText.setString(L"");
        }

        // ÏïÑÌòÑ Î≥¥ÎÑàÏä§ ÌëúÏãú (0.3%)
        if (friend2Level >= 20) {
            int ahyeonBonus = calculateIndividualFriendBonus(currentGold, friend2Level, 1);
            std::wstring ahyeonText = formatMoney(ahyeonBonus);
            ahyeonBonusText.setString(ahyeonText);
        } else {
            ahyeonBonusText.setString(L"");
        }

        // ÏßÑÏÑú Î≥¥ÎÑàÏä§ ÌëúÏãú (0.5%)
        if (friend3Level >= 20) {
            int jinseoBonus = calculateIndividualFriendBonus(currentGold, friend3Level, 2);
            std::wstring jinseoText = formatMoney(jinseoBonus);
            jinseoBonusText.setString(jinseoText);
        } else {
            jinseoBonusText.setString(L"");
        }
    }

    // Î∂ÄÎèôÏÇ∞ ÌÅ¥Î¶≠ Î≥¥ÎÑàÏä§ Í≥ÑÏÇ∞ (Î∂ÄÎèôÏÇ∞ Í∞úÏàò * 0.5%)
    int calculatePropertyClickBonus(int baseGold, int propertyCount) {
        return static_cast<int>(baseGold * propertyCount * 0.005); // 0.5% = 0.005
    }

    // Ï†ÑÏ≤¥ ÌÅ¥Î¶≠Îãπ Í≥®Îìú Í≥ÑÏÇ∞ (Í∏∞Î≥∏ + ÏπúÍµ¨ + Î∂ÄÎèôÏÇ∞)
    int getGoldPerClick(bool showMyeongjun, bool showAhyeon, bool showJinseo, int propertyCount) {
        int baseGold = goldPerClick;

        // ÏπúÍµ¨ Î≥¥ÎÑàÏä§ (Í∏∞Ï°¥ 5% Î≥¥ÎÑàÏä§)
        int friendCount = 0;
        if (showMyeongjun) friendCount++;
        if (showAhyeon) friendCount++;
        if (showJinseo) friendCount++;
        int friendBonus = static_cast<int>(baseGold * friendCount * 0.05);

        // Î∂ÄÎèôÏÇ∞ ÌÅ¥Î¶≠ Î≥¥ÎÑàÏä§ (Î∂ÄÎèôÏÇ∞ Í∞úÏàò * 0.5%)
        int propertyBonus = calculatePropertyClickBonus(baseGold, propertyCount);

        return baseGold + friendBonus + propertyBonus;
    }

    // ÌÅ¥Î¶≠Îãπ Í≥®Îìú Î∞è Î∂ÄÎèôÏÇ∞ ÌåêÎß§ ÏàòÏùµ ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò
    void updateDisplays(bool showMyeongjun, bool showAhyeon, bool showJinseo, int propertyCount, int salesProfit) {
        // Ï¥ù ÌÅ¥Î¶≠Îãπ Í≥®Îìú Í≥ÑÏÇ∞ Î∞è ÌëúÏãú
        int totalClickGold = getGoldPerClick(showMyeongjun, showAhyeon, showJinseo, propertyCount);
        goldLevelText.setString(L" " + std::to_wstring(totalClickGold));

        // Ïó≠ÎåÄ Î∂ÄÎèôÏÇ∞ ÌåêÎß§ ÏàòÏùµ ÌëúÏãú
        propertyLevelText.setString(L" " + std::to_wstring(salesProfit));
    }

    bool handleClick(sf::Vector2f mousePos, MoneyDisplay& moneyDisplay) {
        if (levelUpButton.getGlobalBounds().contains(mousePos)) {
            return tryLevelUp(moneyDisplay);
        }
        return false;
    }

    int getLevel() const {
        return level;
    }

    int getGoldPerClick() const {
        return goldPerClick;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(knuSprite);
        window.draw(knuCharSprite);
        window.draw(levelUpButton);
        window.draw(levelUpText);
        window.draw(levelText);
        window.draw(goldLevelText);
        window.draw(propertyLevelText);

        // ÏπúÍµ¨Î≥Ñ Í∞úÎ≥Ñ Î≥¥ÎÑàÏä§ ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞
        window.draw(myeongjunBonusText);
        window.draw(ahyeonBonusText);
        window.draw(jinseoBonusText);
    }
};

class FriendSystem {
public:
    struct Friend {
        std::string name;
        int purchasePrice;
        int level;
        int levelUpCost;
        int incomePerSecond;
        bool owned;
        sf::FloatRect clickArea;
        sf::Text displayText;
        sf::Text costText;
    };

private:
    sf::Font friendFont;
    std::vector<Friend> friends;
    sf::Clock incomeTimer;

public:
    bool init() {
        if (!friendFont.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            return false;
        }

        friends.resize(3);

        // Î™ÖÏ§Ä (Friend 0) - 0.1% Î≥¥ÎÑàÏä§
        friends[0].name = "Î™ÖÏ§Ä";
        friends[0].purchasePrice = 1000;
        friends[0].level = 0;
        friends[0].levelUpCost = 2000;
        friends[0].incomePerSecond = 0;
        friends[0].owned = false;
        friends[0].clickArea = sf::FloatRect(29, 294, 140, 45);

        friends[0].displayText.setFont(friendFont);
        friends[0].displayText.setString(formatMoney(friends[0].purchasePrice));
        friends[0].displayText.setCharacterSize(20);
        friends[0].displayText.setFillColor(sf::Color::Black);
        sf::FloatRect rect1 = friends[0].displayText.getLocalBounds();
        friends[0].displayText.setOrigin(rect1.left + rect1.width / 2, rect1.top + rect1.height / 2);
        friends[0].displayText.setPosition(29.f + 70.f, 294.f + 15.f);

        friends[0].costText.setFont(friendFont);
        friends[0].costText.setString(L"");
        friends[0].costText.setCharacterSize(14);
        friends[0].costText.setFillColor(sf::Color::Red);
        friends[0].costText.setPosition(29.f + 10.f, 294.f + 30.f);

        // ÏïÑÌòÑ (Friend 1) - 0.3% Î≥¥ÎÑàÏä§
        friends[1].name = "ÏïÑÌòÑ";
        friends[1].purchasePrice = 10000;
        friends[1].level = 0;
        friends[1].levelUpCost = 10000;
        friends[1].incomePerSecond = 0;
        friends[1].owned = false;
        friends[1].clickArea = sf::FloatRect(222, 292, 137, 46);

        friends[1].displayText.setFont(friendFont);
        friends[1].displayText.setString(formatMoney(friends[1].purchasePrice));
        friends[1].displayText.setCharacterSize(20);
        friends[1].displayText.setFillColor(sf::Color::Black);
        sf::FloatRect rect2 = friends[1].displayText.getLocalBounds();
        friends[1].displayText.setOrigin(rect2.left + rect2.width / 2, rect2.top + rect2.height / 2);
        friends[1].displayText.setPosition(221.f + 68.f, 292.f + 15.f);

        friends[1].costText.setFont(friendFont);
        friends[1].costText.setString(L"");
        friends[1].costText.setCharacterSize(14);
        friends[1].costText.setFillColor(sf::Color::Red);
        friends[1].costText.setPosition(222.f + 10.f, 292.f + 30.f);

        // ÏßÑÏÑú (Friend 2) - 0.5% Î≥¥ÎÑàÏä§
        friends[2].name = "ÏßÑÏÑú";
        friends[2].purchasePrice = 100000;
        friends[2].level = 0;
        friends[2].levelUpCost = 100000;
        friends[2].incomePerSecond = 0;
        friends[2].owned = false;
        friends[2].clickArea = sf::FloatRect(31, 496, 135, 45);

        friends[2].displayText.setFont(friendFont);
        friends[2].displayText.setString(formatMoney(friends[2].purchasePrice));
        friends[2].displayText.setCharacterSize(20);
        friends[2].displayText.setFillColor(sf::Color::Black);
        sf::FloatRect rect3 = friends[2].displayText.getLocalBounds();
        friends[2].displayText.setOrigin(rect3.left + rect3.width / 2, rect3.top + rect3.height / 2);
        friends[2].displayText.setPosition(27.f + 67.f, 496.f + 15.f);

        friends[2].costText.setFont(friendFont);
        friends[2].costText.setString(L"");
        friends[2].costText.setCharacterSize(14);
        friends[2].costText.setFillColor(sf::Color::Red);
        friends[2].costText.setPosition(31.f + 10.f, 496.f + 30.f);

        return true;
    }

    bool handleClick(sf::Vector2f mousePos, MoneyDisplay& moneyDisplay) {
        for (size_t i = 0; i < friends.size(); i++) {
            if (friends[i].clickArea.contains(mousePos)) {
                if (!friends[i].owned) {
                    if (moneyDisplay.spendMoney(friends[i].purchasePrice)) {
                        friends[i].owned = true;
                        friends[i].level = 1;

                        if (i == 0) friends[i].incomePerSecond = 10;
                        else if (i == 1) friends[i].incomePerSecond = 100;
                        else if (i == 2) friends[i].incomePerSecond = 1000;

                        updateDisplayText(i);
                        std::cout << friends[i].name << " Íµ¨Îß§ ÏôÑÎ£å! " << friends[i].purchasePrice << "Í≥®Îìú ÏßÄÎ∂à" << std::endl;
                        return true;
                    }
                    else {
                        std::cout << "Í≥®ÎìúÍ∞Ä Î∂ÄÏ°±Ìï©ÎãàÎã§!" << std::endl;
                    }
                }
                else {
                    if (moneyDisplay.spendMoney(friends[i].levelUpCost)) {
                        friends[i].level++;

                        if (i == 0) {
                            friends[i].incomePerSecond += 10;
                            friends[i].levelUpCost += 1000;
                        }
                        else if (i == 1) {
                            friends[i].incomePerSecond += 100;
                            friends[i].levelUpCost += 10000;
                        }
                        else if (i == 2) {
                            if (friends[i].level == 2) {
                                friends[i].incomePerSecond = 2000;
                            }
                            else {
                                friends[i].incomePerSecond += 2000;
                            }
                            friends[i].levelUpCost += 100000;
                        }

                        updateDisplayText(i);
                        std::cout << friends[i].name << " Î†àÎ≤®ÏóÖ! ÌòÑÏû¨ Î†àÎ≤®: " << friends[i].level << std::endl;

                        // 20Î†àÎ≤® Îã¨ÏÑ± Ïãú ÌäπÎ≥Ñ Î©îÏãúÏßÄ (Ï∞®Îì± Î≥¥ÎÑàÏä§Ïú® ÌëúÏãú)
                        if (friends[i].level == 20) {
                            std::string bonusRate = "";
                            if (i == 0) bonusRate = "0.1%";
                            else if (i == 1) bonusRate = "0.3%";
                            else if (i == 2) bonusRate = "0.5%";

                            std::cout << "üéâ Ï∂ïÌïòÌï©ÎãàÎã§! " << friends[i].name << "Ïù¥(Í∞Ä) 20Î†àÎ≤®Ïóê Îã¨ÏÑ±ÌñàÏäµÎãàÎã§!" << std::endl;
                            std::cout << "üí∞ " << friends[i].name << "Ïùò " << bonusRate << " Î≥¥ÎÑàÏä§Í∞Ä ÌôúÏÑ±ÌôîÎê©ÎãàÎã§!" << std::endl;
                        }

                        return true;
                    }
                    else {
                        std::cout << "Î†àÎ≤®ÏóÖ ÎπÑÏö©Ïù¥ Î∂ÄÏ°±Ìï©ÎãàÎã§!" << std::endl;
                    }
                }
                break;
            }
        }
        return false;
    }

    void updateDisplayText(int friendIndex) {
        if (friendIndex >= 0 && friendIndex < static_cast<int>(friends.size()) && friends[friendIndex].owned) {
            std::wstring levelText = L"Lv" + std::to_wstring(friends[friendIndex].level);
            friends[friendIndex].displayText.setString(levelText);

            // 20Î†àÎ≤® Ïù¥ÏÉÅÏù¥Î©¥ ÏÉâÏÉÅ Î≥ÄÍ≤Ω
            if (friends[friendIndex].level >= 20) {
                friends[friendIndex].displayText.setFillColor(sf::Color(255, 215, 0)); // Í≥®Îìú ÏÉâÏÉÅ
            } else {
                friends[friendIndex].displayText.setFillColor(sf::Color::Blue);
            }

            std::wstring costText = L"Î†àÎ≤®ÏóÖ: " + formatMoney(friends[friendIndex].levelUpCost);
            friends[friendIndex].costText.setString(costText);

            std::wcout << friends[friendIndex].name.c_str() << L" - Î†àÎ≤®: " << friends[friendIndex].level
                << L", Ï¥àÎãπ ÏàòÏùµ: " << friends[friendIndex].incomePerSecond
                << L", Îã§Ïùå Î†àÎ≤®ÏóÖ ÎπÑÏö©: " << friends[friendIndex].levelUpCost << std::endl;
        }
    }

    void updateIncome(MoneyDisplay& moneyDisplay) {
        if (incomeTimer.getElapsedTime().asSeconds() >= 1.0f) {
            int totalIncome = 0;
            for (const auto& friendObj : friends) {
                if (friendObj.owned) {
                    totalIncome += friendObj.incomePerSecond;
                }
            }

            if (totalIncome > 0) {
                moneyDisplay.addMoney(totalIncome);
                std::cout << "ÏπúÍµ¨Îì§Î°úÎ∂ÄÌÑ∞ " << totalIncome << "Í≥®Îìú ÏàòÏùµ!" << std::endl;
            }

            incomeTimer.restart();
        }
    }

    bool isFriendOwned(int friendIndex) const {
        if (friendIndex >= 0 && friendIndex < static_cast<int>(friends.size())) {
            return friends[friendIndex].owned;
        }
        return false;
    }

    // ÏπúÍµ¨ Î†àÎ≤® Î∞òÌôò Ìï®Ïàò
    int getFriendLevel(int friendIndex) const {
        if (friendIndex >= 0 && friendIndex < static_cast<int>(friends.size())) {
            return friends[friendIndex].level;
        }
        return 0;
    }

    // ÏπúÍµ¨ Ïù¥Î¶Ñ Î∞òÌôò Ìï®Ïàò Ï∂îÍ∞Ä
    std::string getFriendName(int friendIndex) const {
        if (friendIndex >= 0 && friendIndex < static_cast<int>(friends.size())) {
            return friends[friendIndex].name;
        }
        return "";
    }

    int getTotalFriendIncome() const {
        int totalIncome = 0;
        for (const auto& friendObj : friends) {
            if (friendObj.owned) {
                totalIncome += friendObj.incomePerSecond;
            }
        }
        return totalIncome;
    }

    void printFriendInfo() const {
        std::cout << "\n=== ÏπúÍµ¨ Ï†ïÎ≥¥ (Ï∞®Îì± Î≥¥ÎÑàÏä§Ïú®) ===" << std::endl;
        for (size_t i = 0; i < friends.size(); i++) {
            if (friends[i].owned) {
                std::string bonusRate = "";
                if (i == 0) bonusRate = "0.1%";
                else if (i == 1) bonusRate = "0.3%";
                else if (i == 2) bonusRate = "0.5%";

                std::cout << friends[i].name << " - Lv" << friends[i].level
                    << ", Ï¥àÎãπ " << friends[i].incomePerSecond << "Í≥®Îìú"
                    << ", Î†àÎ≤®ÏóÖ ÎπÑÏö©: " << friends[i].levelUpCost << "Í≥®Îìú";

                if (friends[i].level >= 20) {
                    std::cout << " [üèÜ 20Î†àÎ≤® Îã¨ÏÑ±! " << bonusRate << " Î≥¥ÎÑàÏä§ ÌôúÏÑ±Ìôî]";
                } else {
                    std::cout << " [20Î†àÎ≤® Îã¨ÏÑ± Ïãú " << bonusRate << " Î≥¥ÎÑàÏä§]";
                }
                std::cout << std::endl;
            }
            else {
                std::string bonusRate = "";
                if (i == 0) bonusRate = "0.1%";
                else if (i == 1) bonusRate = "0.3%";
                else if (i == 2) bonusRate = "0.5%";

                std::cout << friends[i].name << " - ÎØ∏Íµ¨Îß§ (Íµ¨Îß§ ÎπÑÏö©: " << friends[i].purchasePrice
                    << "Í≥®Îìú, 20Î†àÎ≤® Îã¨ÏÑ± Ïãú " << bonusRate << " Î≥¥ÎÑàÏä§)" << std::endl;
            }
        }
        std::cout << "==========================================\n" << std::endl;
    }

    void draw(sf::RenderWindow& window) {
        for (const auto& friendObj : friends) {
            window.draw(friendObj.displayText);
            if (friendObj.owned) {
                window.draw(friendObj.costText);
            }
        }
    }
};

class Game {
private:
    sf::RenderWindow window;
    MoneyDisplay moneyDisplay;
    Background background;
    Character character;
    RealEstate realEstate;
    KNUPowerSystem knuPowerSystem;
    FriendSystem friendSystem;

    sf::Texture mjTexture, ahTexture, jsTexture;
    sf::Sprite mjSprite, ahSprite, jsSprite;

    sf::RectangleShape clickableArea;

    sf::Text assetText;
    sf::Font assetFont;
    int totalAsset = 0;

    std::string lastScene = "bg_playground.png";
    bool shouldShowCharacter = true;

    bool isCharacterBackground(const std::string& background) {
        return (background == "bg_dujeongStaion.png" ||
            background == "bg_google.png" ||
            background == "bg_playground.png" ||
            background == "bg_seouStation.png");
    }

public:
    Game() : window(sf::VideoMode(405, 720), "Ï∞®Îì± Î≥¥ÎÑàÏä§ & Î∂ÄÎèôÏÇ∞ ÌÅ¥Î¶≠ Î≥¥ÎÑàÏä§ ÏãúÏä§ÌÖú") {}

    bool init() {
        std::locale::global(std::locale(""));
        std::wcout.imbue(std::locale(""));

        if (!moneyDisplay.init() || !background.init(window) || !character.init() ||
            !realEstate.init(window) || !knuPowerSystem.init(window) || !friendSystem.init())
            return false;

        clickableArea.setSize({ 180.f, 40.f });
        clickableArea.setPosition(203.f, 621.f);
        clickableArea.setOutlineColor(sf::Color::White);
        clickableArea.setOutlineThickness(2.f);

        if (!mjTexture.loadFromFile("friends_mj.png") ||
            !ahTexture.loadFromFile("friends_ah.png") ||
            !jsTexture.loadFromFile("friends_js.png")) {
            std::cerr << "ÏπúÍµ¨ Ï∫êÎ¶≠ÌÑ∞ ÌÖçÏä§Ï≤ò Î°úÎî© Ïã§Ìå®!" << std::endl;
        }

        mjSprite.setTexture(mjTexture);
        ahSprite.setTexture(ahTexture);
        jsSprite.setTexture(jsTexture);

        mjSprite.setScale(0.5f, 0.5f);
        ahSprite.setScale(0.5f, 0.5f);
        jsSprite.setScale(0.5f, 0.5f);

        mjSprite.setPosition(100.f, 400.f);
        ahSprite.setPosition(220.f, 360.f);
        jsSprite.setPosition(160.f, 180.f);

        if (!assetFont.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "ÏûêÏÇ∞ Ìè∞Ìä∏ Î°úÎî© Ïã§Ìå®!" << std::endl;
            return false;
        }
        assetText.setFont(assetFont);
        assetText.setCharacterSize(16);
        assetText.setFillColor(sf::Color::White);
        assetText.setPosition(window.getSize().x - 200.f, 10.f);
        updateTotalAsset();

        return true;
    }

    void updateTotalAsset() {
        int baseMoney = moneyDisplay.getMoney();

        // ÏπúÍµ¨ Î≥¥ÎÑàÏä§ Í≥ÑÏÇ∞ (Í∏∞Ï°¥ 5% Î≥¥ÎÑàÏä§)
        int friendBonus = 0;
        int friendCount = 0;
        if (friendSystem.isFriendOwned(0)) friendCount++;
        if (friendSystem.isFriendOwned(1)) friendCount++;
        if (friendSystem.isFriendOwned(2)) friendCount++;
        friendBonus = static_cast<int>(baseMoney * (friendCount * 0.05));

        // 20Î†àÎ≤® Îã¨ÏÑ± Ï∞®Îì± Î≥¥ÎÑàÏä§ Ï∂îÍ∞Ä Í≥ÑÏÇ∞
        int level20Bonus = knuPowerSystem.calculateFriendBonus(
            baseMoney,
            friendSystem.getFriendLevel(0),
            friendSystem.getFriendLevel(1),
            friendSystem.getFriendLevel(2)
        );

        int propertyValue = realEstate.getTotalPropertyValue();
        int propertyInterest = realEstate.getTotalInterest();
        int friendIncome = friendSystem.getTotalFriendIncome();

        // Ï¥ù ÏûêÏÇ∞ Í≥ÑÏÇ∞ (Ï∞®Îì± 20Î†àÎ≤® Î≥¥ÎÑàÏä§ Ìè¨Ìï®)
        totalAsset = baseMoney + friendBonus + level20Bonus + propertyValue + propertyInterest + (friendIncome * 60);

        std::wstring assetString = L"ÌòÑÏû¨ ÏûêÏÇ∞ : " + formatMoney(totalAsset);
        assetText.setFillColor(sf::Color(100, 250, 50));
        assetText.setPosition(210.f, 30.f);
        assetText.setString(assetString);

        // KNU ÌååÏõå ÌôîÎ©¥ÏóêÏÑú ÏπúÍµ¨Î≥Ñ Ï∞®Îì± Î≥¥ÎÑàÏä§ ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
        knuPowerSystem.updateFriendBonusDisplay(
            baseMoney,
            friendSystem.getFriendLevel(0),
            friendSystem.getFriendLevel(1),
            friendSystem.getFriendLevel(2)
        );

        // ÌÅ¥Î¶≠Îãπ Í≥®Îìú Î∞è Î∂ÄÎèôÏÇ∞ ÌåêÎß§ ÏàòÏùµ ÌëúÏãú ÏóÖÎç∞Ïù¥Ìä∏
        knuPowerSystem.updateDisplays(
            friendSystem.isFriendOwned(0),
            friendSystem.isFriendOwned(1),
            friendSystem.isFriendOwned(2),
            realEstate.getOwnedPropertyCount(),
            realEstate.getTotalSalesProfit()
        );
    }

    void run() {
        while (window.isOpen()) {
            handleEvents();
            update();
            render();
        }
    }

private:
    void handleEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Space) {
                int goldIncrease = knuPowerSystem.getGoldPerClick(
                    friendSystem.isFriendOwned(0),
                    friendSystem.isFriendOwned(1),
                    friendSystem.isFriendOwned(2),
                    realEstate.getOwnedPropertyCount()
                );
                moneyDisplay.increase(goldIncrease);

                // ÌÅ¥Î¶≠ Î≥¥ÎÑàÏä§ Ï†ïÎ≥¥ Ï∂úÎ†•
                int propertyCount = realEstate.getOwnedPropertyCount();
                if (propertyCount > 0) {
                    int propertyBonus = knuPowerSystem.calculatePropertyClickBonus(knuPowerSystem.getGoldPerClick(), propertyCount);
                    std::cout << "üíé ÌÅ¥Î¶≠ ÌöçÎìù: " << goldIncrease << "Í≥®Îìú (Î∂ÄÎèôÏÇ∞ Î≥¥ÎÑàÏä§: " << propertyBonus << "Í≥®Îìú)" << std::endl;
                }
            }

            if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::F) {
                friendSystem.printFriendInfo();
            }

            if (event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left) {
                sf::Vector2f mousePos = window.mapPixelToCoords({ event.mouseButton.x, event.mouseButton.y });

                std::string current = background.getCurrentFile();

                if (current == "KUN power_bg.png") {
                    if (knuPowerSystem.handleClick(mousePos, moneyDisplay)) {
                        updateTotalAsset();
                    }
                    else if (sf::FloatRect(352, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                else if (current == "building_bg.png") {
                    if (realEstate.handleClick(mousePos, moneyDisplay)) {
                        updateTotalAsset(); // Ïù¥ÎØ∏ updateDisplays Ìè¨Ìï®Îê®

                        // Î∂ÄÎèôÏÇ∞ Í±∞Îûò Ïãú Ï†ïÎ≥¥ Ï∂úÎ†•
                        int propertyCount = realEstate.getOwnedPropertyCount();
                        int totalSalesProfit = realEstate.getTotalSalesProfit();
                        std::cout << "üè¢ ÌòÑÏû¨ Î∂ÄÎèôÏÇ∞ " << propertyCount << "Í∞ú Î≥¥Ïú† Ï§ë!" << std::endl;
                        std::cout << "üí∞ Ïó≠ÎåÄ Î∂ÄÎèôÏÇ∞ ÌåêÎß§ Ï¥ù ÏàòÏùµ: " << totalSalesProfit << "Í≥®Îìú" << std::endl;
                    }
                    else if (sf::FloatRect(352, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                else if (current == "friends_bg.png") {
                    if (friendSystem.handleClick(mousePos, moneyDisplay)) {
                        updateTotalAsset();
                    }
                    else if (sf::FloatRect(354, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                else if (current == "MovingBeggingPlace_bg.png") {
                    if (sf::FloatRect(23, 159, 157, 189).contains(mousePos)) {
                        background.load("bg_playground.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(209, 159, 155, 192).contains(mousePos)) {
                        background.load("bg_dujeongStaion.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(24, 438, 157, 187).contains(mousePos)) {
                        background.load("bg_seouStation.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(208, 436, 156, 185).contains(mousePos)) {
                        background.load("bg_google.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(352, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                else if (current != "MovingBeggingPlace_bg.png" && current != "friends_bg.png") {
                    if (clickableArea.getGlobalBounds().contains(mousePos)) {
                        lastScene = current;
                        background.load("MovingBeggingPlace_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    else if (sf::FloatRect(13, 570, 181, 39).contains(mousePos)) {
                        lastScene = current;
                        background.load("friends_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    else if (sf::FloatRect(200, 570, 181, 39).contains(mousePos)) {
                        lastScene = current;
                        background.load("KUN power_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    else if (sf::FloatRect(15, 621, 181, 39).contains(mousePos)) {
                        lastScene = current;
                        background.load("building_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    else if (friendSystem.handleClick(mousePos, moneyDisplay)) {
                        updateTotalAsset();
                    }
                }
            }
        }
    }

    void update() {
        std::string current = background.getCurrentFile();

        if (shouldShowCharacter && isCharacterBackground(current)) {
            character.update();
        }

        friendSystem.updateIncome(moneyDisplay);
        updateTotalAsset();
    }

    void render() {
        window.clear();
        std::string current = background.getCurrentFile();

        if (current == "building_bg.png") {
            realEstate.draw(window);
        }
        else if (current == "KUN power_bg.png") {
            knuPowerSystem.draw(window);
        }
        else if (current == "friends_bg.png") {
            background.draw(window);
            friendSystem.draw(window);
        }
        else {
            background.draw(window);

            if (shouldShowCharacter && isCharacterBackground(current)) {
                character.draw(window);

                if (friendSystem.isFriendOwned(0)) window.draw(mjSprite);
                if (friendSystem.isFriendOwned(1)) window.draw(ahSprite);
                if (friendSystem.isFriendOwned(2)) window.draw(jsSprite);
            }
        }

        moneyDisplay.draw(window);
        window.draw(assetText);
        window.display();
    }
};

int main() {
    Game game;
    if (!game.init()) {
        std::cerr << "Í≤åÏûÑ Ï¥àÍ∏∞Ìôî Ïã§Ìå®!" << std::endl;
        return -1;
    }
    game.run();
    return 0;
}
