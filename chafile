#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <string>

std::wstring formatMoney(int money) {
    std::wstring result;
    std::wstring num = std::to_wstring(money);
    int count = 0;
    for (int i = num.size() - 1; i >= 0; --i) {
        result.insert(result.begin(), num[i]);
        count++;
        if (count % 3 == 0 && i != 0) {
            result.insert(result.begin(), L',');
        }
    }
    result += L"원";
    return result;
}

class MoneyDisplay {
private:
    int money = 0;
    sf::Text text;
    sf::Font font;

public:
    bool init() {
        if (!font.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "폰트 로딩 실패!" << std::endl;
            return false;
        }
        text.setFont(font);
        text.setCharacterSize(20);
        text.setFillColor(sf::Color::Yellow);
        text.setPosition(50.f, 30.f);
        text.setString(sf::String(formatMoney(money)));
        return true;
    }

    void increase() {
        money++;
        text.setString(sf::String(formatMoney(money)));
    }

    void draw(sf::RenderWindow& window) {
        window.draw(text);
    }
};

class Background {
private:
    sf::Texture texture;
    sf::Sprite sprite;
    std::string currentFile = "frame3.png";

public:
    bool init(const sf::RenderWindow& window) {
        return load("frame3.png", window);
    }

    // 수정한 부분!!!!!!!
    bool load(const std::string& filename, const sf::RenderWindow& window) {
    if (!texture.loadFromFile(filename)) {
        std::cerr << filename << " 로딩 실패!" << std::endl;
        return false;
    }

    sprite.setTexture(texture);

    // 이 부분을 이미지마다 갱신되도록 반드시 호출
    float scaleX = window.getSize().x / static_cast<float>(texture.getSize().x);
    float scaleY = window.getSize().y / static_cast<float>(texture.getSize().y);
    sprite.setScale(scaleX, scaleY);

    currentFile = filename;
    return true;
}

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }
};

class Character {
private:
    std::vector<sf::Texture> textures;
    sf::Sprite sprite;
    int currentFrame = 0;
    sf::Clock clock;
    float switchTime = 0.5f;

public:
    bool init() {
        textures.resize(2);
        if (!textures[0].loadFromFile("frame1.png")) {
            std::cerr << "frame1.png 로딩 실패!" << std::endl;
            return false;
        }
        if (!textures[1].loadFromFile("frame2.png")) {
            std::cerr << "frame2.png 로딩 실패!" << std::endl;
            return false;
        }

        sprite.setTexture(textures[0]);
        sprite.setScale(0.6f, 0.6f);
        sprite.setPosition(20.f, 300.f);
        return true;
    }

    void update() {
        if (clock.getElapsedTime().asSeconds() >= switchTime) {
            currentFrame = (currentFrame + 1) % 2;
            sprite.setTexture(textures[currentFrame]);
            clock.restart();
        }
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }
};

class Game {
private:
    sf::RenderWindow window;
    MoneyDisplay moneyDisplay;
    Background background;
    Character character;

    sf::RectangleShape clickableArea;
    bool backgroundChanged = false;

public:
    Game() : window(sf::VideoMode(405, 720), "Homeless Character Animation") {}

    bool init() {
        if (!moneyDisplay.init() || !background.init(window) || !character.init())
            return false;

        clickableArea.setSize({ 182.f, 42.f });
        clickableArea.setPosition(204.f, 618.f);
        clickableArea.setOutlineColor(sf::Color::White);
        clickableArea.setOutlineThickness(2.f);

        return true;
    }

    void run() {
        while (window.isOpen()) {
            handleEvents();
            update();
            render();
        }
    }

private:
    void handleEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed &&
                event.key.code == sf::Keyboard::Space) {
                moneyDisplay.increase();
            }

            if (event.type == sf::Event::MouseButtonPressed &&
                event.mouseButton.button == sf::Mouse::Left) {
                sf::Vector2f mousePos = window.mapPixelToCoords({ event.mouseButton.x, event.mouseButton.y });
                std::wcout << L"[클릭 위치] x: " << mousePos.x << ", y: " << mousePos.y << std::endl;

                if (!backgroundChanged && clickableArea.getGlobalBounds().contains(mousePos)) {
                    if (background.load("구걸장소 이동.png", window)) {
                        backgroundChanged = true;
                        std::cout << "[배경 전환] 구걸장소 이동.png 적용됨\n";
                    }
                }
            }
        }
    }

    void update() {
        if (!backgroundChanged)
            character.update();
    }

    void render() {
        window.clear();
        background.draw(window);
        if (!backgroundChanged)
            character.draw(window);
        moneyDisplay.draw(window);
        window.display();
    }
};

int main() {
    Game game;
    if (!game.init())
        return -1;
    game.run();
    return 0;
}
