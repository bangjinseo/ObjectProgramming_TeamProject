#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <string>
#include <locale>
#include <map>

std::wstring formatMoney(int money) {
    std::wstring result;
    std::wstring num = std::to_wstring(money);
    int count = 0;
    for (int i = num.size() - 1; i >= 0; --i) {
        result.insert(result.begin(), num[i]);
        count++;
        if (count % 3 == 0 && i != 0) {
            result.insert(result.begin(), L',');
        }
    }
    result += L" 골드";
    return result;
}

class MoneyDisplay {
private:
    int money = 50000;
    sf::Text text;
    sf::Font font;

public:
    bool init() {
        if (!font.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "폰트 로딩 실패!" << std::endl;
            return false;
        }
        text.setFont(font);
        text.setCharacterSize(20);
        text.setFillColor(sf::Color::Yellow);
        text.setPosition(55.f, 26.f);
        text.setString(sf::String(formatMoney(money)));
        return true;
    }

    void increase(int amount = 1) {
        money += amount;
        text.setString(sf::String(formatMoney(money)));
    }

    void addMoney(int amount) {
        money += amount;
        text.setString(sf::String(formatMoney(money)));
    }

    bool spendMoney(int amount) {
        if (money >= amount) {
            money -= amount;
            text.setString(sf::String(formatMoney(money)));
            return true;
        }
        return false;
    }

    int getMoney() const {
        return money;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(text);
    }
};

class Background {
private:
    sf::Texture texture;
    sf::Sprite sprite;
    std::string currentFile = "bg_playground.png";

public:
    bool init(const sf::RenderWindow& window) {
        return load("bg_playground.png", window);
    }

    bool load(const std::string& filename, const sf::RenderWindow& window) {
        if (!texture.loadFromFile(filename)) {
            std::cerr << filename << " 로딩 실패!" << std::endl;
            return false;
        }

        sprite.setTexture(texture);
        float scaleX = window.getSize().x / static_cast<float>(texture.getSize().x);
        float scaleY = window.getSize().y / static_cast<float>(texture.getSize().y);
        sprite.setScale(scaleX, scaleY);
        currentFile = filename;
        return true;
    }

    const std::string& getCurrentFile() const {
        return currentFile;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }
};

class Character {
private:
    std::vector<sf::Texture> textures;
    sf::Sprite sprite;
    int currentFrame = 0;
    sf::Clock clock;
    float switchTime = 0.5f;

public:
    bool init() {
        textures.resize(2);
        if (!textures[0].loadFromFile("kn_beggar1.png")) {
            std::cerr << "kn_beggar1.png 로딩 실패!" << std::endl;
            return false;
        }
        if (!textures[1].loadFromFile("kn_beggar2.png")) {
            std::cerr << "kn_beggar2.png 로딩 실패!" << std::endl;
            return false;
        }

        sprite.setTexture(textures[0]);
        sprite.setScale(0.6f, 0.6f);
        sprite.setPosition(20.f, 300.f);
        return true;
    }

    void update() {
        if (clock.getElapsedTime().asSeconds() >= switchTime) {
            currentFrame = (currentFrame + 1) % 2;
            sprite.setTexture(textures[currentFrame]);
            clock.restart();
        }
    }

    void draw(sf::RenderWindow& window) {
        window.draw(sprite);
    }
};

class RealEstate {
public:
    struct Property {
        std::string name;
        int price;
        int maxInterest;
        bool owned;
        sf::FloatRect buttonArea;
        sf::Text buttonText;
    };

private:
    sf::Font font;
    std::map<std::string, Property> properties;
    sf::Texture buildingTexture;
    sf::Sprite buildingSprite;

public:
    bool init(sf::RenderWindow& window) {
        if (!font.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "폰트 로딩 실패!" << std::endl;
            return false;
        }

        if (!buildingTexture.loadFromFile("building_bg.png")) {
            std::cerr << "building_bg.png 로딩 실패!" << std::endl;
            return false;
        }

        buildingSprite.setTexture(buildingTexture);
        float scaleX = window.getSize().x / static_cast<float>(buildingTexture.getSize().x);
        float scaleY = window.getSize().y / static_cast<float>(buildingTexture.getSize().y);
        buildingSprite.setScale(scaleX, scaleY);

        // 부동산 정보 초기화
        Property eng8;
        eng8.name = "8공학관";
        eng8.price = 3000;
        eng8.maxInterest = 2000;
        eng8.owned = false;
        eng8.buttonArea = sf::FloatRect(38, 352, 135, 41);
        eng8.buttonText.setFont(font);
        eng8.buttonText.setString(formatMoney(eng8.price));
        eng8.buttonText.setCharacterSize(14);
        eng8.buttonText.setFillColor(sf::Color::Black);
        eng8.buttonText.setPosition(70, 360);
        properties["8공학관"] = eng8;

        Property student;
        student.name = "학생회관";
        student.price = 500;
        student.maxInterest = 100;
        student.owned = false;
        student.buttonArea = sf::FloatRect(234, 352, 135, 41);
        student.buttonText.setFont(font);
        student.buttonText.setString(formatMoney(student.price));
        student.buttonText.setCharacterSize(14);
        student.buttonText.setFillColor(sf::Color::Black);
        student.buttonText.setPosition(270, 360);
        properties["학생회관"] = student;

        Property challenge;
        challenge.name = "챌린지하우스";
        challenge.price = 5000;
        challenge.maxInterest = 4500;
        challenge.owned = false;
        challenge.buttonArea = sf::FloatRect(38, 588, 135, 41);
        challenge.buttonText.setFont(font);
        challenge.buttonText.setString(formatMoney(challenge.price));
        challenge.buttonText.setCharacterSize(14);
        challenge.buttonText.setFillColor(sf::Color::Black);
        challenge.buttonText.setPosition(70, 605);
        properties["챌린지하우스"] = challenge;

        Property library;
        library.name = "도서관";
        library.price = 2500;
        library.maxInterest = 1800;
        library.owned = false;
        library.buttonArea = sf::FloatRect(234, 588, 135, 41);
        library.buttonText.setFont(font);
        library.buttonText.setString(formatMoney(library.price));
        library.buttonText.setCharacterSize(14);
        library.buttonText.setFillColor(sf::Color::Black);
        library.buttonText.setPosition(270, 605);
        properties["도서관"] = library;

        return true;
    }

    int getTotalPropertyValue() const {
        int totalValue = 0;
        for (const auto& pair : properties) {
            if (pair.second.owned) {
                totalValue += pair.second.price;
            }
        }
        return totalValue;
    }

    int getTotalInterest() const {
        int totalInterest = 0;
        for (const auto& pair : properties) {
            if (pair.second.owned) {
                totalInterest += pair.second.maxInterest;
            }
        }
        return totalInterest;
    }

    int getOwnedPropertyCount() const {
        int count = 0;
        for (const auto& pair : properties) {
            if (pair.second.owned) {
                count++;
            }
        }
        return count;
    }

    bool handleClick(sf::Vector2f mousePos, MoneyDisplay& moneyDisplay) {
        for (auto& pair : properties) {
            Property& prop = pair.second;
            if (prop.buttonArea.contains(mousePos)) {
                if (!prop.owned) {
                    if (moneyDisplay.spendMoney(prop.price)) {
                        prop.owned = true;
                        prop.buttonText.setString(L"판매하기");
                        prop.buttonText.setFillColor(sf::Color(255, 0, 0));
                        std::cout << prop.name << " 구매 완료! " << prop.price << "골드 지불" << std::endl;
                        return true;
                    }
                    else {
                        std::cout << "골드가 부족합니다!" << std::endl;
                    }
                }
                else {
                    int sellPrice = prop.price + prop.maxInterest;
                    moneyDisplay.addMoney(sellPrice);
                    prop.owned = false;
                    prop.buttonText.setString(formatMoney(prop.price));
                    prop.buttonText.setFillColor(sf::Color(0, 0, 0));
                    std::cout << prop.name << " 판매 완료! " << sellPrice << "골드 획득" << std::endl;
                    return true;
                }
            }
        }
        return false;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(buildingSprite);
        for (const auto& pair : properties) {
            window.draw(pair.second.buttonText);
        }
    }
};

class KNUPowerSystem {
private:
    sf::Font font;
    sf::Texture knuTexture;
    sf::Sprite knuSprite;
    sf::Sprite knuCharSprite;

    int level = 1;
    int goldPerClick = 1;
    int levelUpCost = 100;

    sf::RectangleShape levelUpButton;
    sf::Text levelUpText;
    sf::Text levelText;
    sf::Text goldLevelText;
    sf::Text propertyLevelText;
    sf::Text friendsText;

public:
    bool init(sf::RenderWindow& window) {
        if (!font.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "폰트 로딩 실패!" << std::endl;
            return false;
        }

        if (!knuTexture.loadFromFile("KUN power_bg.png")) {
            std::cerr << "KUN power_bg.png 로딩 실패!" << std::endl;
            return false;
        }

        knuSprite.setTexture(knuTexture);
        float scaleX = window.getSize().x / static_cast<float>(knuTexture.getSize().x);
        float scaleY = window.getSize().y / static_cast<float>(knuTexture.getSize().y);
        knuSprite.setScale(scaleX, scaleY);

        knuCharSprite.setScale(0.4f, 0.4f);
        knuCharSprite.setPosition(142.f, 498.f);

        levelUpButton.setSize(sf::Vector2f(140.f, 27.f));
        levelUpButton.setPosition(220.f, 235.f);
        levelUpButton.setFillColor(sf::Color(255, 195, 91));
        levelUpButton.setOutlineColor(sf::Color(255, 195, 91));
        levelUpButton.setOutlineThickness(2.f);

        levelUpText.setFont(font);
        levelUpText.setString(L"레벨업 (" + formatMoney(levelUpCost) + L")");
        levelUpText.setCharacterSize(15);
        levelUpText.setFillColor(sf::Color::Black);
        levelUpText.setPosition(235.f, 243.f);

        levelText.setFont(font);
        levelText.setString(L"Lv" + std::to_wstring(level));
        levelText.setCharacterSize(24);
        levelText.setFillColor(sf::Color(88, 74, 40));
        levelText.setPosition(195.f, 190.f);

        goldLevelText.setFont(font);
        goldLevelText.setString(L" " + std::to_wstring(goldPerClick));
        goldLevelText.setCharacterSize(18);
        goldLevelText.setFillColor(sf::Color(48, 42, 27));
        goldLevelText.setPosition(140.f, 305.f);

        propertyLevelText.setFont(font);
        propertyLevelText.setString(L"");
        propertyLevelText.setCharacterSize(18);
        propertyLevelText.setFillColor(sf::Color(48, 42, 27));
        propertyLevelText.setPosition(157.f, 355.f);

        friendsText.setFont(font);
        friendsText.setString(L"친구 20레벨 달성 보너스");
        friendsText.setCharacterSize(20);
        friendsText.setFillColor(sf::Color::Black);
        friendsText.setPosition(100.f, 970.f);

        return true;
    }

    bool tryLevelUp(MoneyDisplay& moneyDisplay) {
        if (moneyDisplay.spendMoney(levelUpCost)) {
            level++;
            goldPerClick = level;
            levelUpCost = 100 * level;

            levelText.setString(L"Lv" + std::to_wstring(level));
            levelUpText.setString(L"레벨업 (" + formatMoney(levelUpCost) + L")");
            goldLevelText.setString(L" " + std::to_wstring(goldPerClick));

            return true;
        }
        return false;
    }

    int getGoldPerClick(bool showMyeongjun, bool showAhyeon, bool showJinseo, int propertyCount) {
        int baseGold = goldPerClick;

        int friendCount = 0;
        if (showMyeongjun) friendCount++;
        if (showAhyeon) friendCount++;
        if (showJinseo) friendCount++;

        int friendBonus = baseGold * friendCount * 0.1;
        int propertyBonus = baseGold * propertyCount * 0.05;

        return baseGold + friendBonus + propertyBonus;
    }

    void updatePropertyBonus(int propertyCount) {
        int propertyBonus = goldPerClick * propertyCount * 0.05;
        propertyLevelText.setString(L" " + std::to_wstring(propertyBonus));
    }

    bool handleClick(sf::Vector2f mousePos, MoneyDisplay& moneyDisplay) {
        if (levelUpButton.getGlobalBounds().contains(mousePos)) {
            return tryLevelUp(moneyDisplay);
        }
        return false;
    }

    int getLevel() const {
        return level;
    }

    int getGoldPerClick() const {
        return goldPerClick;
    }

    void draw(sf::RenderWindow& window) {
        window.draw(knuSprite);
        window.draw(knuCharSprite);
        window.draw(levelUpButton);
        window.draw(levelUpText);
        window.draw(levelText);
        window.draw(goldLevelText);
        window.draw(propertyLevelText);
        window.draw(friendsText);
    }
};

class FriendSystem {
public:
    struct Friend {
        std::string name;
        int purchasePrice;
        int level;
        int levelUpCost;
        int incomePerSecond;
        bool owned;
        sf::FloatRect clickArea;
        sf::Text displayText;
        sf::Text costText; // 레벨업 비용 표시용 텍스트 추가
    };

private:
    sf::Font friendFont;
    std::vector<Friend> friends;
    sf::Clock incomeTimer;

public:
    bool init() {
        if (!friendFont.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            return false;
        }

        friends.resize(3);

        // 명준 (Friend 0)
        friends[0].name = "명준";
        friends[0].purchasePrice = 1000;
        friends[0].level = 0;
        friends[0].levelUpCost = 2000;
        friends[0].incomePerSecond = 0;
        friends[0].owned = false;
        friends[0].clickArea = sf::FloatRect(29, 294, 140, 45);

        friends[0].displayText.setFont(friendFont);
        friends[0].displayText.setString(formatMoney(friends[0].purchasePrice));
        friends[0].displayText.setCharacterSize(20);
        friends[0].displayText.setFillColor(sf::Color::Black);
        sf::FloatRect rect1 = friends[0].displayText.getLocalBounds();
        friends[0].displayText.setOrigin(rect1.left + rect1.width / 2, rect1.top + rect1.height / 2);
        friends[0].displayText.setPosition(29.f + 70.f, 294.f + 15.f);

        // 레벨업 비용 텍스트 초기화
        friends[0].costText.setFont(friendFont);
        friends[0].costText.setString(L"");
        friends[0].costText.setCharacterSize(14);
        friends[0].costText.setFillColor(sf::Color::Red);
        friends[0].costText.setPosition(29.f + 10.f, 294.f + 30.f);

        // 아현 (Friend 1)
        friends[1].name = "아현";
        friends[1].purchasePrice = 10000;
        friends[1].level = 0;
        friends[1].levelUpCost = 10000;
        friends[1].incomePerSecond = 0;
        friends[1].owned = false;
        friends[1].clickArea = sf::FloatRect(222, 292, 137, 46);

        friends[1].displayText.setFont(friendFont);
        friends[1].displayText.setString(formatMoney(friends[1].purchasePrice));
        friends[1].displayText.setCharacterSize(20);
        friends[1].displayText.setFillColor(sf::Color::Black);
        sf::FloatRect rect2 = friends[1].displayText.getLocalBounds();
        friends[1].displayText.setOrigin(rect2.left + rect2.width / 2, rect2.top + rect2.height / 2);
        friends[1].displayText.setPosition(221.f + 68.f, 292.f + 15.f);

        friends[1].costText.setFont(friendFont);
        friends[1].costText.setString(L"");
        friends[1].costText.setCharacterSize(14);
        friends[1].costText.setFillColor(sf::Color::Red);
        friends[1].costText.setPosition(222.f + 10.f, 292.f + 30.f);

        // 진서 (Friend 2)
        friends[2].name = "진서";
        friends[2].purchasePrice = 100000;
        friends[2].level = 0;
        friends[2].levelUpCost = 100000;
        friends[2].incomePerSecond = 0;
        friends[2].owned = false;
        friends[2].clickArea = sf::FloatRect(31, 496, 135, 45);

        friends[2].displayText.setFont(friendFont);
        friends[2].displayText.setString(formatMoney(friends[2].purchasePrice));
        friends[2].displayText.setCharacterSize(20);
        friends[2].displayText.setFillColor(sf::Color::Black);
        sf::FloatRect rect3 = friends[2].displayText.getLocalBounds();
        friends[2].displayText.setOrigin(rect3.left + rect3.width / 2, rect3.top + rect3.height / 2);
        friends[2].displayText.setPosition(27.f + 67.f, 496.f + 15.f);

        friends[2].costText.setFont(friendFont);
        friends[2].costText.setString(L"");
        friends[2].costText.setCharacterSize(14);
        friends[2].costText.setFillColor(sf::Color::Red);
        friends[2].costText.setPosition(31.f + 10.f, 496.f + 30.f);

        return true;
    }

    bool handleClick(sf::Vector2f mousePos, MoneyDisplay& moneyDisplay) {
        for (size_t i = 0; i < friends.size(); i++) {
            if (friends[i].clickArea.contains(mousePos)) {
                if (!friends[i].owned) {
                    // 친구 구매
                    if (moneyDisplay.spendMoney(friends[i].purchasePrice)) {
                        friends[i].owned = true;
                        friends[i].level = 1;

                        // 초기 수익 설정
                        if (i == 0) friends[i].incomePerSecond = 10; // 명준
                        else if (i == 1) friends[i].incomePerSecond = 100; // 아현
                        else if (i == 2) friends[i].incomePerSecond = 1000; // 진서

                        updateDisplayText(i);
                        std::cout << friends[i].name << " 구매 완료! " << friends[i].purchasePrice << "골드 지불" << std::endl;
                        return true;
                    }
                    else {
                        std::cout << "골드가 부족합니다!" << std::endl;
                    }
                }
                else {
                    // 레벨업
                    if (moneyDisplay.spendMoney(friends[i].levelUpCost)) {
                        friends[i].level++;

                        // 수익 증가
                        if (i == 0) { // 명준: 10원씩 증가
                            friends[i].incomePerSecond += 10;
                            friends[i].levelUpCost += 1000;
                        }
                        else if (i == 1) { // 아현: 100원씩 증가
                            friends[i].incomePerSecond += 100;
                            friends[i].levelUpCost += 10000;
                        }
                        else if (i == 2) { // 진서: 특별 계산
                            if (friends[i].level == 2) {
                                friends[i].incomePerSecond = 2000; // 2레벨: 2000원/초
                            }
                            else {
                                friends[i].incomePerSecond += 2000;
                            }
                            friends[i].levelUpCost += 100000;
                        }

                        updateDisplayText(i);
                        std::cout << friends[i].name << " 레벨업! 현재 레벨: " << friends[i].level << std::endl;
                        return true;
                    }
                    else {
                        std::cout << "레벨업 비용이 부족합니다!" << std::endl;
                    }
                }
                break;
            }
        }
        return false;
    }

    void updateDisplayText(int friendIndex) {
        if (friendIndex >= 0 && friendIndex < static_cast<int>(friends.size()) && friends[friendIndex].owned) {
            // 레벨 표시
            std::wstring levelText = L"Lv" + std::to_wstring(friends[friendIndex].level);
            friends[friendIndex].displayText.setString(levelText);
            friends[friendIndex].displayText.setFillColor(sf::Color::Blue);

            // 레벨업 비용 표시
            std::wstring costText = L"레벨업: " + formatMoney(friends[friendIndex].levelUpCost);
            friends[friendIndex].costText.setString(costText);

            // 수익 정보도 추가로 표시
            std::wcout << friends[friendIndex].name.c_str() << L" - 레벨: " << friends[friendIndex].level
                << L", 초당 수익: " << friends[friendIndex].incomePerSecond
                << L", 다음 레벨업 비용: " << friends[friendIndex].levelUpCost << std::endl;
        }
    }

    void updateIncome(MoneyDisplay& moneyDisplay) {
        if (incomeTimer.getElapsedTime().asSeconds() >= 1.0f) {
            int totalIncome = 0;
            for (const auto& friendObj : friends) {
                if (friendObj.owned) {
                    totalIncome += friendObj.incomePerSecond;
                }
            }

            if (totalIncome > 0) {
                moneyDisplay.addMoney(totalIncome);
                std::cout << "친구들로부터 " << totalIncome << "골드 수익!" << std::endl;
            }

            incomeTimer.restart();
        }
    }

    bool isFriendOwned(int friendIndex) const {
        if (friendIndex >= 0 && friendIndex < static_cast<int>(friends.size())) {
            return friends[friendIndex].owned;
        }
        return false;
    }

    int getTotalFriendIncome() const {
        int totalIncome = 0;
        for (const auto& friendObj : friends) {
            if (friendObj.owned) {
                totalIncome += friendObj.incomePerSecond;
            }
        }
        return totalIncome;
    }

    // 친구 정보 출력 함수 추가
    void printFriendInfo() const {
        std::cout << "\n=== 친구 정보 ===" << std::endl;
        for (size_t i = 0; i < friends.size(); i++) {
            if (friends[i].owned) {
                std::cout << friends[i].name << " - Lv" << friends[i].level
                    << ", 초당 " << friends[i].incomePerSecond << "골드"
                    << ", 레벨업 비용: " << friends[i].levelUpCost << "골드" << std::endl;
            }
            else {
                std::cout << friends[i].name << " - 미구매 (구매 비용: " << friends[i].purchasePrice << "골드)" << std::endl;
            }
        }
        std::cout << "==================\n" << std::endl;
    }

    void draw(sf::RenderWindow& window) {
        for (const auto& friendObj : friends) {
            window.draw(friendObj.displayText);
            // 소유한 친구만 레벨업 비용 표시
            if (friendObj.owned) {
                window.draw(friendObj.costText);
            }
        }
    }
};

class Game {
private:
    sf::RenderWindow window;
    MoneyDisplay moneyDisplay;
    Background background;
    Character character;
    RealEstate realEstate;
    KNUPowerSystem knuPowerSystem;
    FriendSystem friendSystem;

    // 친구 캐릭터들
    sf::Texture mjTexture, ahTexture, jsTexture;
    sf::Sprite mjSprite, ahSprite, jsSprite;

    sf::RectangleShape clickableArea;

    // 자산 표시
    sf::Text assetText;
    sf::Font assetFont;
    int totalAsset = 0;

    std::string lastScene = "bg_playground.png";
    bool shouldShowCharacter = true;

    bool isCharacterBackground(const std::string& background) {
        return (background == "bg_dujeongStaion.png" ||
            background == "bg_google.png" ||
            background == "bg_playground.png" ||
            background == "bg_seouStation.png");
    }

public:
    Game() : window(sf::VideoMode(405, 720), "친구 레벨업 비용 표시 시스템") {}

    bool init() {
        std::locale::global(std::locale(""));
        std::wcout.imbue(std::locale(""));

        if (!moneyDisplay.init() || !background.init(window) || !character.init() ||
            !realEstate.init(window) || !knuPowerSystem.init(window) || !friendSystem.init())
            return false;

        clickableArea.setSize({ 180.f, 40.f });
        clickableArea.setPosition(203.f, 621.f);
        clickableArea.setOutlineColor(sf::Color::White);
        clickableArea.setOutlineThickness(2.f);

        // 친구 캐릭터 텍스처 로딩
        if (!mjTexture.loadFromFile("friends_mj.png") ||
            !ahTexture.loadFromFile("friends_ah.png") ||
            !jsTexture.loadFromFile("friends_js.png")) {
            std::cerr << "친구 캐릭터 텍스처 로딩 실패!" << std::endl;
        }

        mjSprite.setTexture(mjTexture);
        ahSprite.setTexture(ahTexture);
        jsSprite.setTexture(jsTexture);

        mjSprite.setScale(0.5f, 0.5f);
        ahSprite.setScale(0.5f, 0.5f);
        jsSprite.setScale(0.5f, 0.5f);

        mjSprite.setPosition(100.f, 400.f);
        ahSprite.setPosition(220.f, 360.f);
        jsSprite.setPosition(160.f, 180.f);

        // 자산 표시 초기화
        if (!assetFont.loadFromFile("NotoSansKR-SemiBold.ttf")) {
            std::cerr << "자산 폰트 로딩 실패!" << std::endl;
            return false;
        }
        assetText.setFont(assetFont);
        assetText.setCharacterSize(16);
        assetText.setFillColor(sf::Color::White);
        assetText.setPosition(window.getSize().x - 200.f, 10.f);
        updateTotalAsset();

        return true;
    }

    void updateTotalAsset() {
        int baseMoney = moneyDisplay.getMoney();

        // 친구 보너스 계산
        int friendBonus = 0;
        int friendCount = 0;
        if (friendSystem.isFriendOwned(0)) friendCount++;
        if (friendSystem.isFriendOwned(1)) friendCount++;
        if (friendSystem.isFriendOwned(2)) friendCount++;
        friendBonus = static_cast<int>(baseMoney * (friendCount * 0.05));

        // 부동산 가치와 이자 계산
        int propertyValue = realEstate.getTotalPropertyValue();
        int propertyInterest = realEstate.getTotalInterest();

        // 친구 수익 계산
        int friendIncome = friendSystem.getTotalFriendIncome();

        // 총 자산 계산
        totalAsset = baseMoney + friendBonus + propertyValue + propertyInterest + (friendIncome * 60);

        // 텍스트 업데이트
        std::wstring assetString = L"현재 자산 : " + formatMoney(totalAsset);
        assetText.setFillColor(sf::Color(100, 250, 50));
        assetText.setPosition(210.f, 30.f);
        assetText.setString(assetString);
    }

    void run() {
        while (window.isOpen()) {
            handleEvents();
            update();
            render();
        }
    }

private:
    void handleEvents() {
        sf::Event event;
        while (window.pollEvent(event)) {
            if (event.type == sf::Event::Closed)
                window.close();

            if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::Space) {
                int goldIncrease = knuPowerSystem.getGoldPerClick(
                    friendSystem.isFriendOwned(0),
                    friendSystem.isFriendOwned(1),
                    friendSystem.isFriendOwned(2),
                    realEstate.getOwnedPropertyCount()
                );
                moneyDisplay.increase(goldIncrease);
            }

            // F 키로 친구 정보 출력
            if (event.type == sf::Event::KeyPressed && event.key.code == sf::Keyboard::F) {
                friendSystem.printFriendInfo();
            }

            if (event.type == sf::Event::MouseButtonPressed && event.mouseButton.button == sf::Mouse::Left) {
                sf::Vector2f mousePos = window.mapPixelToCoords({ event.mouseButton.x, event.mouseButton.y });
                std::wcout << L"[클릭 위치] x: " << static_cast<int>(mousePos.x) << L", y: " << static_cast<int>(mousePos.y) << std::endl;

                std::string current = background.getCurrentFile();

                // KNU 파워 화면
                if (current == "KUN power_bg.png") {
                    if (knuPowerSystem.handleClick(mousePos, moneyDisplay)) {
                        updateTotalAsset();
                    }
                    else if (sf::FloatRect(352, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                // 부동산 화면
                else if (current == "building_bg.png") {
                    if (realEstate.handleClick(mousePos, moneyDisplay)) {
                        knuPowerSystem.updatePropertyBonus(realEstate.getOwnedPropertyCount());
                        updateTotalAsset();
                    }
                    else if (sf::FloatRect(352, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                // 친구 화면
                else if (current == "friends_bg.png") {
                    if (friendSystem.handleClick(mousePos, moneyDisplay)) {
                        updateTotalAsset();
                    }
                    else if (sf::FloatRect(354, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                // 구걸장소 이동 화면
                else if (current == "MovingBeggingPlace_bg.png") {
                    if (sf::FloatRect(23, 159, 157, 189).contains(mousePos)) {
                        background.load("bg_playground.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(209, 159, 155, 192).contains(mousePos)) {
                        background.load("bg_dujeongStaion.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(24, 438, 157, 187).contains(mousePos)) {
                        background.load("bg_seouStation.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(208, 436, 156, 185).contains(mousePos)) {
                        background.load("bg_google.png", window);
                        shouldShowCharacter = true;
                    }
                    else if (sf::FloatRect(352, 92, 27, 23).contains(mousePos)) {
                        background.load(lastScene, window);
                        shouldShowCharacter = isCharacterBackground(lastScene);
                    }
                }
                // 메인 게임 화면들
                else if (current != "MovingBeggingPlace_bg.png" && current != "friends_bg.png") {
                    // 하단 메뉴 클릭
                    if (clickableArea.getGlobalBounds().contains(mousePos)) {
                        lastScene = current;
                        background.load("MovingBeggingPlace_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    // 친구 메뉴
                    else if (sf::FloatRect(13, 570, 181, 39).contains(mousePos)) {
                        lastScene = current;
                        background.load("friends_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    // KNU 파워 메뉴
                    else if (sf::FloatRect(200, 570, 181, 39).contains(mousePos)) {
                        lastScene = current;
                        background.load("KUN power_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    // 부동산 메뉴
                    else if (sf::FloatRect(15, 621, 181, 39).contains(mousePos)) {
                        lastScene = current;
                        background.load("building_bg.png", window);
                        shouldShowCharacter = false;
                    }
                    // 친구 캐릭터 직접 클릭 (메인 화면에서도 구매/레벨업 가능)
                    else if (friendSystem.handleClick(mousePos, moneyDisplay)) {
                        updateTotalAsset();
                    }
                }
            }
        }
    }

    void update() {
        std::string current = background.getCurrentFile();

        if (shouldShowCharacter && isCharacterBackground(current)) {
            character.update();
        }

        // 친구들의 초당 수익 업데이트
        friendSystem.updateIncome(moneyDisplay);

        updateTotalAsset();
        knuPowerSystem.updatePropertyBonus(realEstate.getOwnedPropertyCount());
    }

    void render() {
        window.clear();
        std::string current = background.getCurrentFile();

        if (current == "building_bg.png") {
            realEstate.draw(window);
        }
        else if (current == "KUN power_bg.png") {
            knuPowerSystem.draw(window);
        }
        else if (current == "friends_bg.png") {
            background.draw(window);
            friendSystem.draw(window);
        }
        else {
            background.draw(window);

            if (shouldShowCharacter && isCharacterBackground(current)) {
                character.draw(window);

                // 소유한 친구 캐릭터들만 렌더링
                if (friendSystem.isFriendOwned(0)) window.draw(mjSprite);
                if (friendSystem.isFriendOwned(1)) window.draw(ahSprite);
                if (friendSystem.isFriendOwned(2)) window.draw(jsSprite);
            }
        }

        moneyDisplay.draw(window);
        window.draw(assetText);
        window.display();
    }
};

int main() {
    Game game;
    if (!game.init()) {
        std::cerr << "게임 초기화 실패!" << std::endl;
        return -1;
    }

    std::cout << "=== 게임 조작법 ===" << std::endl;
    std::cout << "스페이스바: 골드 획득" << std::endl;
    std::cout << "F키: 친구 정보 출력" << std::endl;
    std::cout << "마우스 클릭: 친구 구매/레벨업" << std::endl;
    std::cout << "===================" << std::endl;

    game.run();
    return 0;
}
